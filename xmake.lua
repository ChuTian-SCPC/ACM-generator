add_rules("mode.debug", "mode.release")

task("merge")
    on_run(function()
        -- 生成时间戳
        local timestamp = os.date("%Y-%m-%d %H:%M:%S")

        -- 运行合并命令
        os.exec("xmake l cli.amalgamate -o . generator")

        -- 测试使用
        os.exec("xmake l cli.amalgamate generator")
        -- 读取生成的内容
        local content = io.readfile("generator.h")

        -- 注入版本信息
        local header = string.format([[
// ==================================================
// Auto-generated by xmake amalgamate
// Time: %s
// ==================================================
#ifndef _SGPCET_
#define _SGPCET_
]], timestamp)

        local footer = [[
#endif // _SGPCET_ 
        ]]

        -- 重新写入文件
        io.writefile("generator.h", header .. content .. footer)
    end)
    set_menu {
        description = "合并头文件"
    }

target("generator")
    set_kind("headeronly")
    add_includedirs("src") 
    add_headerfiles("src/include_all.h")

target("tests")
    set_kind("binary")
    add_cxxflags("/utf-8") 
    set_languages("cxx17")
    add_files("test/*.cpp")
    add_files("test/catch/catch_amalgamated.cpp")
    add_includedirs("./test/catch")
    add_includedirs("src")
    add_deps("generator")

target("val_test_val")
    set_kind("binary")
    set_targetdir("./test/validate")
    set_filename("val")
    add_files("./test/validate/val.cpp")

target("val_test_test")
    set_kind("binary")
    set_targetdir("./test/validate")
    set_filename("test")
    add_includedirs("./test/catch")
    add_files("./test/validate/test.cpp")
    add_files("test/catch/catch_amalgamated.cpp")
    add_deps("val_test_val")

task("validate_test")
    on_run(function ()
        os.exec("xmake build val_test_val")
        os.exec("xmake build val_test_test")
        local val_exe = os.host() == "windows" and "val.exe" or "val"
        local test_exe = os.host() == "windows" and "test.exe" or "test"
        os.exec("./test/validate/" .. test_exe)
        os.rm("./test/validate/testcases")
        os.rm("./test/validate/validate")
        os.rm("./test/validate/" .. val_exe)
        os.rm("./test/validate/" .. test_exe)
    end)
    set_menu {
        description = "validate测试"
    }

task("run_test")
    on_run(function()
        import("core.base.task")
        import("core.base.option")
        
        task.run("build", {target = "tests"})
        
        local tags = option.get("tags")
        local test_cmd = "xmake run tests"
        
        if tags then
            test_cmd = test_cmd .. " " .. tags
        end
        
        os.exec(test_cmd)
        
        local do_validate = option.get("validate-test")
        if do_validate then
            os.exec("xmake validate_test")
        end
    end)
    set_menu {
        options = {
            {"t", "tags", "kv", nil, "Catch2标签过滤（如 [tag1][tag2]）"},
            {"V", "validate-test", "k", nil, "validate测试"}
        },
        description = "运行测试"
    }